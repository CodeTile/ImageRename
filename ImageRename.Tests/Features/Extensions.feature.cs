// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:3.1.0.0
//      SpecFlow Generator Version:3.1.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace ImageRename.Tests.Features
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.1.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public partial class ExtensionsFeature : object, Xunit.IClassFixture<ExtensionsFeature.FixtureData>, System.IDisposable
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
        private string[] _featureTags = ((string[])(null));
        
        private Xunit.Abstractions.ITestOutputHelper _testOutputHelper;
        
#line 1 "Extensions.feature"
#line hidden
        
        public ExtensionsFeature(ExtensionsFeature.FixtureData fixtureData, ImageRename_Tests_XUnitAssemblyFixture assemblyFixture, Xunit.Abstractions.ITestOutputHelper testOutputHelper)
        {
            this._testOutputHelper = testOutputHelper;
            this.TestInitialize();
        }
        
        public static void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-GB"), "Extensions", "\tTest the extensions in ImageRename.Standard", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public virtual void TestInitialize()
        {
        }
        
        public virtual void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Xunit.Abstractions.ITestOutputHelper>(_testOutputHelper);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        void System.IDisposable.Dispose()
        {
            this.TestTearDown();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="TestCordinates")]
        [Xunit.TraitAttribute("FeatureTitle", "Extensions")]
        [Xunit.TraitAttribute("Description", "TestCordinates")]
        [Xunit.TraitAttribute("Category", "mytag")]
        public virtual void TestCordinates()
        {
            string[] tagsOfScenario = new string[] {
                    "mytag"};
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("TestCordinates", null, new string[] {
                        "mytag"});
#line 5
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                            "Coordinates",
                            "Degrees",
                            "KeyWords"});
                table1.AddRow(new string[] {
                            "36.00°7.08\'0.00\" N",
                            "36.11667",
                            "Camp Bay, Gibraltar"});
                table1.AddRow(new string[] {
                            "5.00°21.04\'0.00\" W",
                            "-5.35000",
                            "Camp Bay, Gibraltar"});
                table1.AddRow(new string[] {
                            "25°20′42″S",
                            "-25.34500",
                            "Uluru, Base Walk South, Mutitjulu NT, Australia"});
                table1.AddRow(new string[] {
                            "131°02′10″E",
                            "131.03611",
                            "Uluru, Base Walk South, Mutitjulu NT, Australia"});
                table1.AddRow(new string[] {
                            "50° 39\' 45.62\" N",
                            "50.66267",
                            "The Needles Lighthouse, T25, Alum Bay PO39 0JH, United Kingdom"});
                table1.AddRow(new string[] {
                            "1° 35\' 21.124\" W",
                            "-1.58920",
                            "The Needles Lighthouse, T25, Alum Bay PO39 0JH, United Kingdom"});
                table1.AddRow(new string[] {
                            "53° 32\' 30.44\"n",
                            "53.54179",
                            "St. Pauli-Elbtunnel, 20457 Hamburg, Germany"});
                table1.AddRow(new string[] {
                            "9° 57\' 59.653\"e",
                            "9.96657",
                            "St. Pauli-Elbtunnel, 20457 Hamburg, Germany"});
                table1.AddRow(new string[] {
                            "15° 52\' 2.8\"s",
                            "-15.86744",
                            "Sagres, Estrada Parque Aeroporto, Lago Sul - Federal District, 70610-100, Brazil"});
                table1.AddRow(new string[] {
                            "47° 55\' 52.345\"w",
                            "-47.93121",
                            "Sagres, Estrada Parque Aeroporto, Lago Sul - Federal District, 70610-100, Brazil"});
#line 6
testRunner.Given("I test the coordinates", ((string)(null)), table1, "Given ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.1.0.0")]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : System.IDisposable
        {
            
            public FixtureData()
            {
                ExtensionsFeature.FeatureSetup();
            }
            
            void System.IDisposable.Dispose()
            {
                ExtensionsFeature.FeatureTearDown();
            }
        }
    }
}
#pragma warning restore
#endregion
